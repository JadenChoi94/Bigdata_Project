package bigdata;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class SecMeterLog {

	public static void main(String[] args) {
		PrintWriter printWriter = null;
		
				try {
						int MeterCount = 100;
						String date = new SimpleDateFormat( "yyyyMMdd" ).format( new Date( System.currentTimeMillis() ) );
										
						
						if(args != null  && args.length > 1) {
							date = args[0];
						}
						
						if(args != null && args.length > 1) {
							MeterCount = Integer.parseInt(args[1]);
						}
				
						ExecutorService exc = Executors.newFixedThreadPool(MeterCount); 
						int wildMetercnt = (int)(MeterCount * 0.1);
				
						HashSet<Integer> wildMeterSet = new HashSet<Integer>();
						
						for(int i=0 ; i < wildMetercnt; i++) {
							wildMeterSet.add(randomRange(1,MeterCount));
						}
				
						Iterator<Integer> itr = wildMeterSet.iterator();
				
						boolean isWild = false;
						int tmpWildMeterNum;
				
						///home/workspace/smartmeter/working/logs/sec	
						//D:/Bigdata_Project/Final_project/data
						
						String logFile = "D:/Bigdata_Project/Final_project/data/SecMeter_" + date + ".log";
						printWriter = new PrintWriter( new FileWriter( logFile ), true );
						String datedate = "";
						itr = wildMeterSet.iterator();
						
						
						for(int i = 1; i <= MeterCount; i++) {
								
							while(itr.hasNext()) {
								tmpWildMeterNum = itr.next();
									
								if( tmpWildMeterNum == i ) {
									isWild = true;
									break;
								} else {
									isWild = false;
										}
								}
							
							exc.submit( new RealMeterLogThread( datedate, genMeterId( i ), genMacAdd(i), genFamily(i), printWriter ) );
							}
						} 
				catch( IOException e ) 
				{
					e.printStackTrace();
				}
				
		}
		
		
		public static int randomRange(int n1, int n2) {
			return (int)((Math.random() * (n2 - n1 + 1)) + n1);
		}
		
		
		public static int genFamily(int koo) {
			int[][] indat = new int[100][2];     
			int famNum = 0;
		    try {
		        ///home/workspace/smartmeter/working
		        File csv = new File("D:/Bigdata_Project/Final_project/data/domain.csv");
		        BufferedReader br = new BufferedReader(new FileReader(csv));
		        String line = "";
		        int row =0 ,i; 
		        while ((line = br.readLine()) != null) {
		        	
		            String[] token = line.split(",", -1);
		            for(i=1;i<2;i++)    indat[row][i] = Integer.parseInt(token[i]);                               
		            row++;
		        }
		        br.close(); 
		    } 
		    catch (FileNotFoundException e) {
		        e.printStackTrace();
		    } 
		    catch (IOException e) {
		        e.printStackTrace();
		    }
		    famNum = indat[koo-1][1];  
		    
		    return famNum;       
		}
		
		    
		
		public static String genMeterId(int num) { 
			String prefixNum = ("H");
			DecimalFormat format = new DecimalFormat("000");
			String meterNum = format.format(num);
		
			return prefixNum + meterNum;
		}
		
		public static String genMacAdd(int goo) {
			
			String[][] indat = new String[100][3];     
			String Macadd;
		    try {
		    	
		        File csv = new File("D:/Bigdata_Project/Final_project/data/domain.csv");
		        BufferedReader br = new BufferedReader(new FileReader(csv));
		        String line = "";
		        int row =0 ,i; 
		        while ((line = br.readLine()) != null) {
		        	
		            String[] token = line.split(",", -1);
		            for(i=1;i<3;i++)    indat[row][i] = (token[i]);                               
		            row++;
		        }
		        br.close(); 
		    } 
		    catch (FileNotFoundException e) {
		        e.printStackTrace();
		    } 
		    catch (IOException e) {
		        e.printStackTrace();
		    }
		    Macadd = indat[goo-1][2];  
		    
		    return Macadd;
		}

	}
