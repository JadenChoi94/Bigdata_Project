pc1=princomp(USArrests, cor=T)
summary(pc1)
plot(pc1)
plot(pc1, type=2)
plot(pc1, type='l')
pc1$center
pc1$scale
pc1$loadings
pc1$scores
plot(pc1$scores[,1], pc1$scores[,2], xlab='xZ1', ylab='Z2')
abline(v=0, h=0, col='grey')
abline(v=0, h=0, col='gray')
biplot(pc1, cex=0.7)
abline(v=0, h=0,col='red')
install.packages('arules')
install.packages('arulesViz')
library(arules)
library(arulesViz)
data("Groceries")
data(Groceries)
data(package='arules')
inspect(Groceries)
inspect(Groceries[1:10])
data(package='arules')
summary(Groceries)
itemFrequency(Groceries, type='absolute')
sort(itemFrequency(Groceries, type='absolute'))
sort(itemFrequency(Groceries, type='absolute'), decreasing = T)
round(sort(itemFrequency(Groceries, type='absolute'), decreasing = T), 2)
itemFrequencyPlot(Groceries,topN=10, type='absolute')
itemFrequencyPlot(Groceries,topN=10, type='relative')
itemFrequencyPlot(Groceries,topN=10, type='absolute')
itemFrequencyPlot(Groceries,topN=10, type='relative')
apriori(Groceries)
rt_rules=apriori(Groceries, parameter = list(support=0.005, confidence=0.5, minlen=2))
summary(rt_rules)
inspect(rt_rules[1:5])
rules_lift=sort(rt_rules, by='lift', decreasing = T)
inspect(rules_lift)
inspect(rules_lift[1:10])
milk_rule=subset(rt_rules, items %in% 'whole milk')
milk_rule
rhs_milk=subset(rt_rules, rhs %in% 'whole milk')
rhs_milk
inspect(rhs_milk[1:5])
wholemilk_rule<-apriori(Groceries, parameter=list(support=0.005, confidence=0.5, minlen=2), appearance = list(default='1hs', rhs='whole milk'))
wholemilk_rule<-apriori(Groceries, parameter=list(support=0.005, confidence=0.5, minlen=2), appearance = list(default='1hs', rhs='whole milk'))
library(arulesViz)
plot(wholemilk_rule[1:10], method='graph', measure='lift', shading'confidence')
wholemilk_rule<-apriori(Groceries, parameter=list(support=0.005, confidence=0.5, minlen=2),
appearance = list(default='1hs', rhs='whole milk'))
wholemilk_rule<-sort(wholemilk_rule, by='lift', decreasing=T)
wholemilk_rule<-apriori(Groceries, parameter=list(support=0.005, confidence=0.5, minlen=2),
appearance = list(default='1hs', rhs='whole milk'))
wholemilk_rule<-apriori(Groceries, parameter=list(support=0.005, confidence=0.5, minlen=2),
appearance = list(default="1hs", rhs="whole milk"))
View(mtcar)
View(mtcars)
df3<-c(221,	228,	218,	206,	201,	193,	193,	204,	211,	198,	198,	207)
sd(df3)
df3<-c(308,	320,	307,	287,	282,	269,	268,	286,	298,	278,	275,	292)
sd(df3)
setwd("D:/Bigdata_Project/Final_project/Source")
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima.csv", header = T)
data
data[,1]
data2<-data[,-1]
data2[,1]
# 1) 소스 데이터를 시계열 데이터로 변환
ts(data2, frequency = n, start = c(2014, 01,01))
# 1) 소스 데이터를 시계열 데이터로 변환
ts(data2, frequency = 1, start = c(2014, 01,01))
# 1) 소스 데이터를 시계열 데이터로 변환
ts(data2, frequency = 1, start = c(2014, 1, 1))
time-Series[1:1826] from 20140101 to 20181231
# 1) 소스 데이터를 시계열 데이터로 변환
ts(data2, frequency = 1, start = c(2014, 1))
# 1) 소스 데이터를 시계열 데이터로 변환
ts(data2, frequency = (1,1), start = c(2014, 1))
plot(data)
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima.csv", header = T)
str(data)
data2<-data[,-1]
data2<-ts(data2, start = 2014, end=2018)
data2
data2.head()
head.data2
head.data2()
head.data2(5)
data2<-ts(data2, start = c(2014), frequency = 1826)
data2
data2<-ts(data2, start = c(2014), frequency = 1825.25)
data2
tsp = attributes(data2)$tsp
datas = seq(as.Date("2014-01-01"), by = "day", along = x)
dates = seq(as.Date("2014-01-01"), by = "day", along = data2)
dates
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data
decompose(data)
## Create a daily Date object - helps my work on dates
inds <- seq(as.Date("2014-01-01"), as.Date("2018-12-31"), by = "day")
myts <- ts(rnorm(length(inds)),     # random data
start = c(2014, as.numeric(format(inds[1], "%j"))),
frequency = 365)
as.numeric(format(inds[1], "%j"))
myts <- ts(rnorm(length(data)),     # random data
start = c(2014, as.numeric(format(inds[1], "%j"))),
frequency = 365)
as.numeric(format(inds[1], "%j"))
## use auto.arima to choose ARIMA terms
fit <- auto.arima(myts)
## forecast for next 60 time points
fore <- forecast(fit, h = 60)
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
## Create a daily Date object - helps my work on dates
inds <- seq(as.Date("2014-01-01"), as.Date("2018-12-31"), by = "day")
myts <- ts(rnorm(length(data)),     # random data
start = c(2014, as.numeric(format(inds[1], "%j"))),
frequency = 365)
as.numeric(format(inds[1], "%j"))
## use auto.arima to choose ARIMA terms
fit <- auto.arima(myts)
## forecast for next 60 time points
fore <- forecast(fit, h = 60)
## plot it
plot(fore)
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
timeSeriesObj = ts(data,start=c(2014,1,1),frequency=365.25)
plot.ts(timeSeriesObj)
decompose(timeSeriesObj)
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data
timeSeriesObj = ts(data,start=c(2014,1,1),frequency=365.25)
decompose(timeSeriesObj)
# 7) 데이터를 활용하여 최적의 ARIMA 모형을 선택
auto.arima(timeSeriesObj)
install.packages(Rcmdr)
install.packages(forecast)
install.packages(ARIMA)
# 7) 데이터를 활용하여 최적의 ARIMA 모형을 선택
auto.arima(timeSeriesObj)
install.packages("forecast")
library(forecast)
# 7) 데이터를 활용하여 최적의 ARIMA 모형을 선택
auto.arima(timeSeriesObj)
data2<-data[1:2]
data2
timeSeriesObj = ts(data2,start=c(2014,1,1),frequency=365.25)
# 7) 데이터를 활용하여 최적의 ARIMA 모형을 선택
auto.arima(data2)
data2
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data2<-data[2,]
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data2<-data[,2]
timeSeriesObj = ts(data2,start=c(2014,1,1),frequency=365.25)
# 7) 데이터를 활용하여 최적의 ARIMA 모형을 선택
auto.arima(timeSeriesObj)
# 8) 선정된 ARIMA 모형으로 데이터를 보정(fitting)
arima(timeSeriesObj, order = c(1,0,1))
# 9) ARIMA 모형에 의해 보정된 데이터를 통해 미래값을 예측
forecast.Arima(timeSeriesObj,order = c(1,0,1), h = 100)
# 9) ARIMA 모형에 의해 보정된 데이터를 통해 미래값을 예측
forecast.Arima(timeSeriesObj, h = 100)
# 9) ARIMA 모형에 의해 보정된 데이터를 통해 미래값을 예측
forecast.Arima(timeSeriesObj,order = c(1,0,1), h = 24)
# 9) ARIMA 모형에 의해 보정된 데이터를 통해 미래값을 예측
forecast.Arima(timeSeriesObj,order = c(1,0,1), h = 24)
# 9) ARIMA 모형에 의해 보정된 데이터를 통해 미래값을 예측
forecast(timeSeriesObj,order = c(1,0,1), h = 24)
.Arima
# 9) ARIMA 모형에 의해 보정된 데이터를 통해 미래값을 예측
forecast.Arima(timeSeriesObj,order = c(1,0,1), h = 24)
# 8) 선정된 ARIMA 모형으로 데이터를 보정(fitting)
fit = arima(timeSeriesObj, order = c(1,0,1))
fit_resid = residuals(fit)
Box.test(fit_resid, lag = 10, type  = "Ljung-Box")
source('D:/Bigdata_Project/Final_project/Source/Arima.R', encoding = 'UTF-8')
install.packages("forecast")
library(forecast)
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data
data2<-data[,2]
timeSeriesObj = ts(data2,start=c(2014,1,1),frequency=365.25)
timeSeriesObj.tail()
timeSeriesObj.tail
timeSeriesObj(tail)
tail(timeSeriesObj)
acf(timeSeriesObj)
pacf(timeSeriesObj)
# 7) 데이터를 활용하여 최적의 ARIMA 모형을 선택
auto.arima(timeSeriesObj)
# 8) 선정된 ARIMA 모형으로 데이터를 보정(fitting)
fit = arima(timeSeriesObj, order = c(1,0,1))
fit_resid = residuals(fit)
Box.test(fit_resid, lag = 10, type  = "Ljung-Box")
# 9) ARIMA 모형에 의해 보정된 데이터를 통해 미래값을 예측
forecast.Arima(timeSeriesObj,order = c(1,0,1), h = 24)
#forecast using the arima model1
forecast_x = forecast( fit, h = 20)
# 10) 시계열 데이터를 그래프로 표현
plot.ts(timeSeriesObj)
accuracy(forecast_x)
fit <- arima(log(timeSeriesObj), c(1, 0, 1),
seasonal = list(order = c(0, 1, 1),period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(timeSeriesObj,2.718^pred$pred, log = "y", lty = c(1,3))
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data2<-data[,-1]
timeSeriesObj = ts(data2,start=c(2014,1,1),frequency=365.25)
acf(timeSeriesObj)
timeSeriesObj = ts(data2,start=c(2014,1,1),frequency=365.25)
acf(timeSeriesObj)
# 7) 데이터를 활용하여 최적의 ARIMA 모형을 선택
auto.arima(timeSeriesObj)
timeSeriesObj
# 7) 데이터를 활용하여 최적의 ARIMA 모형을 선택
auto.arima(timeSeriesObj)
# 8) 선정된 ARIMA 모형으로 데이터를 보정(fitting)
fit = arima(timeSeriesObj, order = c(1,0,1))
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data2<-data[,2]
timeSeriesObj = ts(data2,start=c(2014,1,1),frequency=365.25)
# 7) 데이터를 활용하여 최적의 ARIMA 모형을 선택
auto.arima(timeSeriesObj)
# 8) 선정된 ARIMA 모형으로 데이터를 보정(fitting)
fit = arima(timeSeriesObj, order = c(1,0,1))
fit_resid = residuals(fit)
Box.test(fit_resid, lag = 10, type  = "Ljung-Box")
#forecast using the arima model1
forecast_x = forecast( fit, h = 20) # N-steps ahead forecast
#forecast using the arima model1
forecast_x = forecast( fit, h = 100) # N-steps ahead forecast
accuracy(forecast_x)
# 9) ARIMA 모형에 의해 보정된 데이터를 통해 미래값을 예측
forecast.Arima(timeSeriesObj,order = c(1,0,1), h = 24)
fit <- arima(log(timeSeriesObj), c(1, 0, 1),
seasonal = list(order = c(0, 1, 1),period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(timeSeriesObj,2.718^pred$pred, log = "y", lty = c(1,3))
#=============================================================================
data2 %>% stl(s.window='periodic') %>% seasadj -> eeadj
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data2<-data[,2]
timeSeriesObj = ts(data2,start=c(2014,1,1),frequency=365.25)
#=============================================================================
timeSeriesObj %>% stl(s.window='periodic') %>% seasadj -> eeadj
autoplot(eeadj)
eeadj %>% diff %>% ggtsdisplay(main="")
(fit <- Arima(eeadj, order=c(1,0,1)))
checkresiduals(fit)
autoplot(forecast(fit))
autoplot(fit)
plot.forecast(fit)
library(forecast)
plot.forecast(fit)
library(ggplot2)
plot.forecast(fit)
plot.forecast(fit)
plot(forecast(fit))
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data2<-data[,2]
timeSeriesObj = ts(data2,start=c(2014,1,1),frequency=365.25)
#=============================================================================
timeSeriesObj %>% stl(s.window='periodic') %>% seasadj -> eeadj
autoplot(eeadj)
eeadj %>% diff %>% ggtsdisplay(main="")
(fit <- Arima(eeadj, order=c(1,0,1)))
checkresiduals(fit)
autoplot(forecast(fit))
autoplot(fit)
plot(forecast(fit))
autoplot(forecast(fit))
source('D:/Bigdata_Project/Final_project/Source/Arima.R', encoding = 'UTF-8')
install.packages("forecast")
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data2<-data[,2]
timeSeriesObj = ts(data2,start=c(2014,1,1),frequency=365.25)
#=============================================================================
# 데이터 분해 - trend, seasonal, random 데이터 추세 확인
birth_comp <- decompose(timeSeriesObj)
plot(birth_comp)
#=============================================================================
timeSeriesObj %>% stl(s.window='periodic') %>% seasadj -> eeadj
autoplot(eeadj)
eeadj %>% diff %>% ggtsdisplay(main="")
(fit <- Arima(eeadj, order=c(1,0,1)))
fit
checkresiduals(fit)
autoplot(fit)
# 11) 예측된 시계열 데이터를 그래프로 표현
plot.forecast(timeSeriesObj)
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data2<-data[,2]
timeSeriesObj = ts(data2,start=c(2014,1,1),frequency=365.25)
# 8) 선정된 ARIMA 모형으로 데이터를 보정(fitting)
fit = arima(timeSeriesObj, order = c(1,0,1))
fit_resid = residuals(fit)
#forecast using the arima model1
forecast_x = forecast( fit, h = 100) # N-steps ahead forecast
forecast_x
forecast_x[,2]
forecast_x[,1]
forecast_x
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data2<-data[,2]
timeSeriesObj = ts(data2,start=c(2014,1,1),frequency=365.25)
plot.timeSeriesObj
plot.ts(data2)
plot.ts(timeSeriesObj)
source('D:/Bigdata_Project/Final_project/Source/Arima.R', encoding = 'UTF-8')
install.packages("forecast")
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data2<-data[,-1]
data2<-data2[,2]
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data2<-data[,1:2]
plot.ts(data2)
data2<-data[,1:3]
plot.ts(data2)
data2<-data[,1:101]
plot.ts(data2)
data2<-data[,1:11]
plot.ts(data2)
data2<-data[,1:10]
plot.ts(data2)
# 7) 데이터를 활용하여 최적의 ARIMA 모형을 선택
auto.arima(data2)
install.packages("TTR")
install.packages("TTR")
library(TTR)
install.packages("TTR")
library(TTR)
source('D:/Bigdata_Project/Final_project/Source/Arima.R', encoding = 'UTF-8')
install.packages("TTR")
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data2<-data[,-1]
data2<-data[,1]
#=======================================================================
auto.arima(ts(data2))
library(TTR)
library(forecast)
library(ggplot2)
install.packages("TTR")
source('D:/Bigdata_Project/Final_project/Source/Arima.R', encoding = 'UTF-8')
library(TTR)
source('D:/Bigdata_Project/Final_project/Source/Arima.R', encoding = 'UTF-8')
install.packages("forecast")
install.packages("TTR")
#=======================================================================
auto.arima(ts(data2))
arima(ts(data2), order=c(0,1,0))
#=======================================================================
auto.arima(ts(data2))
forecast.Arima(arima(ts(kings), order=c(0,1,1)) , h=10 )
plot.forecast(forecast.Arima(arima(ts(kings), order=c(0,1,1)), h=10))
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data2<-data[,-1]
data2<-data[,1]
timeSeriesObj = ts(data2,start=c(2014,1,1),frequency=365.25)
plot.ts(data2)
plot.(data2)
plot.data2
# 7) 데이터를 활용하여 최적의 ARIMA 모형을 선택
auto.arima(timeSeriesObj)
# 8) 선정된 ARIMA 모형으로 데이터를 보정(fitting)
fit = arima(timeSeriesObj, order = c(1,0,1))
fit_resid = residuals(fit)
Box.test(fit_resid, lag = 10, type  = "Ljung-Box")
#forecast using the arima model1
forecast_x = forecast( fit, h = 100) # N-steps ahead forecast
# 9) ARIMA 모형에 의해 보정된 데이터를 통해 미래값을 예측
forecast.Arima(timeSeriesObj,order = c(1,0,1), h = 24)
# 10) 시계열 데이터를 그래프로 표현
plot.ts(timeSeriesObj)
library(TTR)
library(forecast)
library(ggplot2)
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data2<-data[,-1]
data2<-data[,1]
autoplot(timeSeriesObj)
timeSeriesObj = ts(data2,start=c(2014,1,1),frequency=365.25)
autoplot(timeSeriesObj)
# 7) 데이터를 활용하여 최적의 ARIMA 모형을 선택
auto.arima(timeSeriesObj)
# 7) 데이터를 활용하여 최적의 ARIMA 모형을 선택
auto.arima(timeSeriesObj)
# 8) 선정된 ARIMA 모형으로 데이터를 보정(fitting)
fit = arima(timeSeriesObj, order = c(1,0,1))
fit_resid = residuals(fit)
Box.test(fit_resid, lag = 10, type  = "Ljung-Box")
#forecast using the arima model1
forecast_x = forecast( fit, h = 100) # N-steps ahead forecast
# 9) ARIMA 모형에 의해 보정된 데이터를 통해 미래값을 예측
forecast.Arima(timeSeriesObj,order = c(1,0,1), h = 24)
# 11) 예측된 시계열 데이터를 그래프로 표현
plot.forecast(timeSeriesObj)
#=======================================================================
fit <- arima(log(timeSeriesObj), c(1, 0, 1),
seasonal = list(order = c(0, 1, 1),period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(timeSeriesObj,2.718^pred$pred, log = "y", lty = c(1,3))
#=======================================================================
auto.arima(ts(data2))
arima(ts(data2), order=c(0,1,0))
forecast.Arima(arima(ts(kings), order=c(0,1,1)) , h=10 )
plot.forecast(forecast.Arima(arima(ts(kings), order=c(0,1,1)), h=10))
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
auto.arima(data)
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data2<-data[,-1]# date 제거
data3<-data[,1]# 한열씩 가져오자
timeSeriesObj = ts(data3,start=c(2014,1,1),frequency=365.25)
auto.arima(timeSeriesObj)
arima(timeSeriesObj, order = c(0,1,0))
auto.arima(diff(log(timeSeriesObj)))
tsdiag(auto.arima(diff(log(timeSeriesObj))))
library(tseries)
fit <- arima(log(timeSeriesObj), c(0, 2, 0),
seasonal = list(order = c(0, 1, 1),period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(timeSeriesObj,2.718^pred$pred, log = "y", lty = c(1,3))
arima(timeSeriesObj, order = c(0,1,0))
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima3.csv", header = T)
data2<-data[,-1]# date 제거
data3<-data2[,1]# 한열씩 가져오자
timeSeriesObj = ts(data3,start=c(2014,1,1),frequency=365.25)
auto.arima(timeSeriesObj)
fit <- arima(log(timeSeriesObj), c(1, 0, 1),
seasonal = list(order = c(0, 1, 1),period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(timeSeriesObj,2.718^pred$pred, log = "y", lty = c(1,3))
fit <- arima(log(timeSeriesObj), c(1, 0, 1), period = 12))
fit <- arima(log(timeSeriesObj), c(1, 0, 1), period = 12)
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima.csv", header = T)
data2<-data[,-1]# date 제거
data3<-data2[,1]# 한열씩 가져오자
timeSeriesObj = ts(data3,start=c(2014,1,1),frequency=365.25)
auto.arima(timeSeriesObj)
library(TTR)
library(forecast)
library(ggplot2)
auto.arima(diff(log(timeSeriesObj)))
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima.csv", header = T)
data2<-data[,-1]# date 제거
data3<-data2[,1]# 한열씩 가져오자
data3
timeSeriesObj = ts(data3,start=c(2014,1,1),frequency=365.25)
tsdiag(auto.arima(diff(log(timeSeriesObj))))
auto.arima(diff(log(timeSeriesObj)))
fit <- arima(log(timeSeriesObj), c(4, 0, 0),
seasonal = list(order = c(0, 1, 1),period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(timeSeriesObj,2.718^pred$pred, log = "y", lty = c(1,3))
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima.csv", header = T)
data2<-data[,-1]# date 제거
data3<-data2[,1]# 한열씩 가져오자
timeSeriesObj = ts(data3,start=c(2014,1,1),frequency=365.25)
auto.arima(diff(log(timeSeriesObj)))
fit <- arima(log(timeSeriesObj), c(4, 0, 0),
seasonal = list(order = c(0, 1, 1),period = 12))
pred <- predict(fit, n.ahead = 1*12)
ts.plot(timeSeriesObj,2.718^pred$pred, log = "y", lty = c(1,3))
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima.csv", header = T)
data2<-data[,-1]# date 제거
data3<-data2[,1]# 한열씩 가져오자
timeSeriesObj = ts(data3,start=c(2014,1,1),frequency=365.25)
auto.arima(diff(log(timeSeriesObj)))
#===============================================================
(fit <- Arima(timeSeriesObj, order=c(4,0,0)))
checkresiduals(fit)
autoplot(forecast(fit))
autoplot(fit)
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima.csv", header = T)
data2<-data[,-1]# date 제거
data3<-data2[,1]# 한열씩 가져오자
#===============================================================
#수민씨꺼
auto.arima(ts(data3))
(fit = Arima(data3, order = c(1,0,1)))
checkresiduals(fit)
autoplot(forecast(fit))
forecast(fit)
forecast.Arima(arima(ts(data3), order = c(1,0,1)), h = 24)
forecast.Arima(arima(ts(data3), order = c(1,0,1)), h = 24)
forecast(fit)
forecast(fit).plot()
fit.plot()
plt.show()
fit.plot()
plt.show()
data <- read.csv(file = "D:/Bigdata_Project/Final_project/data/Dataset/arima.csv", header = T)
data2<-data[,-1]# date 제거
data3<-data2[,1]# 한열씩 가져오자
timeSeriesObj = ts(data3,start=c(2014,1,1),frequency=365.25)
tsdiag(auto.arima(diff(log(timeSeriesObj))))
fit <- arima(log(timeSeriesObj), c(4, 0, 0),
seasonal = list(order = c(0, 1, 1),period = 12))
pred <- predict(fit, n.ahead = 2*12)# 2년 예측
ts.plot(timeSeriesObj,2.718^pred$pred, log = "y", lty = c(1,3))
pred <- predict(fit, n.ahead = 5*12)# 2년 예측
ts.plot(timeSeriesObj,2.718^pred$pred, log = "y", lty = c(1,3))
forecast(fit)
forecast(fit).tail()
forecast.Arima(arima(ts(data3), order = c(1,0,1)), h = 365.25)
forecast.Arima(arima(ts(data3), order = c(1,0,1)), h = 365)
forecast.Arima(arima(ts(data3), order = c(1,0,1)), h = 24)
source('D:/Bigdata_Project/Final_project/Source/Arima.R', encoding = 'UTF-8')
install.packages("forecast")
install.packages("TTR")
